/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FreelancerInterface extends ethers.utils.Interface {
  functions: {
    "clientToContractId(address,uint256)": FunctionFragment;
    "clientVote(uint256,uint8)": FunctionFragment;
    "contracts(uint256)": FunctionFragment;
    "freelancerToContractId(address,uint256)": FunctionFragment;
    "freelancerVote(uint256,uint8)": FunctionFragment;
    "fundWork(uint256,string,uint256,address)": FunctionFragment;
    "fundWorkWithThirdParty(uint256,string,uint256,address,address)": FunctionFragment;
    "getTask(uint256)": FunctionFragment;
    "getTaskForClient(address)": FunctionFragment;
    "getTaskForFreelancer(address)": FunctionFragment;
    "thirdPartyVote(uint256,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "clientToContractId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clientVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freelancerToContractId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freelancerVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundWork",
    values: [BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fundWorkWithThirdParty",
    values: [BigNumberish, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskForClient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskForFreelancer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "thirdPartyVote",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "clientToContractId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clientVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freelancerToContractId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freelancerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundWork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundWorkWithThirdParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTaskForClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskForFreelancer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thirdPartyVote",
    data: BytesLike
  ): Result;

  events: {
    "transferFunds()": EventFragment;
    "workFunded(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "transferFunds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "workFunded"): EventFragment;
}

export class Freelancer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FreelancerInterface;

  functions: {
    clientToContractId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    clientVote(
      _id: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number] & { addr: string; vote: number },
        [string, number] & { addr: string; vote: number },
        string,
        BigNumber,
        number,
        number,
        [string, number] & { addr: string; vote: number },
        BigNumber,
        boolean
      ] & {
        freelancer: [string, number] & { addr: string; vote: number };
        client: [string, number] & { addr: string; vote: number };
        description: string;
        value: BigNumber;
        status: number;
        consensusType: number;
        thirdParty: [string, number] & { addr: string; vote: number };
        id: BigNumber;
        isPopulated: boolean;
      }
    >;

    freelancerToContractId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    freelancerVote(
      _id: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundWork(
      _id: BigNumberish,
      _description: string,
      _value: BigNumberish,
      _freelancer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundWorkWithThirdParty(
      _id: BigNumberish,
      _description: string,
      _value: BigNumberish,
      _freelancer: string,
      _thirdParty: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTask(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [string, number] & { addr: string; vote: number },
          [string, number] & { addr: string; vote: number },
          string,
          BigNumber,
          number,
          number,
          [string, number] & { addr: string; vote: number },
          BigNumber,
          boolean
        ] & {
          freelancer: [string, number] & { addr: string; vote: number };
          client: [string, number] & { addr: string; vote: number };
          description: string;
          value: BigNumber;
          status: number;
          consensusType: number;
          thirdParty: [string, number] & { addr: string; vote: number };
          id: BigNumber;
          isPopulated: boolean;
        }
      ]
    >;

    getTaskForClient(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTaskForFreelancer(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    thirdPartyVote(
      _id: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  clientToContractId(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  clientVote(
    _id: BigNumberish,
    vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contracts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string, number] & { addr: string; vote: number },
      [string, number] & { addr: string; vote: number },
      string,
      BigNumber,
      number,
      number,
      [string, number] & { addr: string; vote: number },
      BigNumber,
      boolean
    ] & {
      freelancer: [string, number] & { addr: string; vote: number };
      client: [string, number] & { addr: string; vote: number };
      description: string;
      value: BigNumber;
      status: number;
      consensusType: number;
      thirdParty: [string, number] & { addr: string; vote: number };
      id: BigNumber;
      isPopulated: boolean;
    }
  >;

  freelancerToContractId(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  freelancerVote(
    _id: BigNumberish,
    vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundWork(
    _id: BigNumberish,
    _description: string,
    _value: BigNumberish,
    _freelancer: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundWorkWithThirdParty(
    _id: BigNumberish,
    _description: string,
    _value: BigNumberish,
    _freelancer: string,
    _thirdParty: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTask(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string, number] & { addr: string; vote: number },
      [string, number] & { addr: string; vote: number },
      string,
      BigNumber,
      number,
      number,
      [string, number] & { addr: string; vote: number },
      BigNumber,
      boolean
    ] & {
      freelancer: [string, number] & { addr: string; vote: number };
      client: [string, number] & { addr: string; vote: number };
      description: string;
      value: BigNumber;
      status: number;
      consensusType: number;
      thirdParty: [string, number] & { addr: string; vote: number };
      id: BigNumber;
      isPopulated: boolean;
    }
  >;

  getTaskForClient(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTaskForFreelancer(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  thirdPartyVote(
    _id: BigNumberish,
    vote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    clientToContractId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clientVote(
      _id: BigNumberish,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number] & { addr: string; vote: number },
        [string, number] & { addr: string; vote: number },
        string,
        BigNumber,
        number,
        number,
        [string, number] & { addr: string; vote: number },
        BigNumber,
        boolean
      ] & {
        freelancer: [string, number] & { addr: string; vote: number };
        client: [string, number] & { addr: string; vote: number };
        description: string;
        value: BigNumber;
        status: number;
        consensusType: number;
        thirdParty: [string, number] & { addr: string; vote: number };
        id: BigNumber;
        isPopulated: boolean;
      }
    >;

    freelancerToContractId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freelancerVote(
      _id: BigNumberish,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fundWork(
      _id: BigNumberish,
      _description: string,
      _value: BigNumberish,
      _freelancer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fundWorkWithThirdParty(
      _id: BigNumberish,
      _description: string,
      _value: BigNumberish,
      _freelancer: string,
      _thirdParty: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getTask(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number] & { addr: string; vote: number },
        [string, number] & { addr: string; vote: number },
        string,
        BigNumber,
        number,
        number,
        [string, number] & { addr: string; vote: number },
        BigNumber,
        boolean
      ] & {
        freelancer: [string, number] & { addr: string; vote: number };
        client: [string, number] & { addr: string; vote: number };
        description: string;
        value: BigNumber;
        status: number;
        consensusType: number;
        thirdParty: [string, number] & { addr: string; vote: number };
        id: BigNumber;
        isPopulated: boolean;
      }
    >;

    getTaskForClient(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTaskForFreelancer(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    thirdPartyVote(
      _id: BigNumberish,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    transferFunds(): TypedEventFilter<[], {}>;

    workFunded(
      work?: null
    ): TypedEventFilter<
      [
        [
          [string, number] & { addr: string; vote: number },
          [string, number] & { addr: string; vote: number },
          string,
          BigNumber,
          number,
          number,
          [string, number] & { addr: string; vote: number },
          BigNumber,
          boolean
        ] & {
          freelancer: [string, number] & { addr: string; vote: number };
          client: [string, number] & { addr: string; vote: number };
          description: string;
          value: BigNumber;
          status: number;
          consensusType: number;
          thirdParty: [string, number] & { addr: string; vote: number };
          id: BigNumber;
          isPopulated: boolean;
        }
      ],
      {
        work: [
          [string, number] & { addr: string; vote: number },
          [string, number] & { addr: string; vote: number },
          string,
          BigNumber,
          number,
          number,
          [string, number] & { addr: string; vote: number },
          BigNumber,
          boolean
        ] & {
          freelancer: [string, number] & { addr: string; vote: number };
          client: [string, number] & { addr: string; vote: number };
          description: string;
          value: BigNumber;
          status: number;
          consensusType: number;
          thirdParty: [string, number] & { addr: string; vote: number };
          id: BigNumber;
          isPopulated: boolean;
        };
      }
    >;
  };

  estimateGas: {
    clientToContractId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clientVote(
      _id: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freelancerToContractId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freelancerVote(
      _id: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundWork(
      _id: BigNumberish,
      _description: string,
      _value: BigNumberish,
      _freelancer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundWorkWithThirdParty(
      _id: BigNumberish,
      _description: string,
      _value: BigNumberish,
      _freelancer: string,
      _thirdParty: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTask(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTaskForClient(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTaskForFreelancer(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    thirdPartyVote(
      _id: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clientToContractId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clientVote(
      _id: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freelancerToContractId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freelancerVote(
      _id: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundWork(
      _id: BigNumberish,
      _description: string,
      _value: BigNumberish,
      _freelancer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundWorkWithThirdParty(
      _id: BigNumberish,
      _description: string,
      _value: BigNumberish,
      _freelancer: string,
      _thirdParty: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTask(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaskForClient(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTaskForFreelancer(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    thirdPartyVote(
      _id: BigNumberish,
      vote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
